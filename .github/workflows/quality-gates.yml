name: HDC Robot Controller Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

env:
  PYTHON_VERSION: '3.9'
  ROS_DISTRO: 'humble'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black ruff mypy pytest pytest-cov bandit safety
        pip install -e .
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff hdc_robot_controller/ tests/ scripts/
    
    - name: Linting (Ruff)
      run: |
        ruff check hdc_robot_controller/ tests/ scripts/
    
    - name: Type checking (MyPy)
      run: |
        mypy hdc_robot_controller/ --ignore-missing-imports
    
    - name: Security scan (Bandit)
      run: |
        bandit -r hdc_robot_controller/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency vulnerability scan (Safety)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        test-suite: ['core', 'integration', 'performance']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopencv-dev \
          python3-opencv \
          redis-server \
          build-essential
    
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        sudo systemctl status redis-server
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-benchmark pytest-timeout
        pip install -e .
    
    - name: Run core tests
      if: matrix.test-suite == 'core'
      run: |
        pytest tests/test_hdc_comprehensive.py \
          --cov=hdc_robot_controller \
          --cov-report=xml \
          --cov-report=html \
          --timeout=300 \
          -v
    
    - name: Run integration tests
      if: matrix.test-suite == 'integration'
      run: |
        pytest tests/ -k "integration" \
          --timeout=600 \
          -v
    
    - name: Run performance tests
      if: matrix.test-suite == 'performance'
      run: |
        pytest tests/ -k "performance" \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          -v
    
    - name: Upload coverage reports
      if: matrix.test-suite == 'core'
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload benchmark results
      if: matrix.test-suite == 'performance'
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ matrix.python-version }}
        path: benchmark-results.json

  ros2-tests:
    name: ROS2 Integration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up ROS2 Humble
      uses: ros-tooling/setup-ros@v0.6
      with:
        required-ros-distributions: humble
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ros-humble-desktop \
          ros-humble-cv-bridge \
          ros-humble-image-transport \
          ros-humble-pcl-ros \
          python3-colcon-common-extensions \
          libopencv-dev \
          build-essential \
          cmake
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Build ROS2 workspace
      run: |
        source /opt/ros/humble/setup.bash
        mkdir -p ~/ros2_ws/src
        cp -r . ~/ros2_ws/src/hdc_robot_controller
        cd ~/ros2_ws
        colcon build --packages-select hdc_robot_controller --cmake-args -DCMAKE_BUILD_TYPE=Release
    
    - name: Run ROS2 tests
      run: |
        source /opt/ros/humble/setup.bash
        cd ~/ros2_ws
        source install/setup.bash
        colcon test --packages-select hdc_robot_controller
        colcon test-result --verbose

  cuda-tests:
    name: CUDA Acceleration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      with:
        cuda: '11.8'
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install CUDA dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cupy-cuda11x
        pip install numba
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test CUDA availability
      run: |
        python -c "import cupy; print('CUDA available:', cupy.cuda.is_available())"
        python -c "from numba import cuda; print('Numba CUDA available:', cuda.is_available())"
    
    - name: Run CUDA-specific tests
      run: |
        pytest tests/ -k "cuda or gpu" -v --timeout=300
      continue-on-error: true  # CUDA may not be available in CI

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo systemctl start redis-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark matplotlib psutil
        pip install -e .
    
    - name: Run comprehensive benchmarks
      run: |
        python scripts/benchmark_suite.py > benchmark-output.txt
    
    - name: Run performance regression tests
      run: |
        pytest tests/ -k "performance" \
          --benchmark-json=performance-results.json \
          --benchmark-min-rounds=5 \
          --benchmark-warmup-iterations=2 \
          -v
    
    - name: Check performance thresholds
      run: |
        python -c "
        import json
        with open('performance-results.json') as f:
            results = json.load(f)
        
        # Define performance thresholds
        thresholds = {
            'bundle_vectors': 0.001,  # 1ms
            'bind_vectors': 0.001,    # 1ms
            'similarity': 0.001,      # 1ms
        }
        
        failures = []
        for benchmark in results['benchmarks']:
            name = benchmark['name']
            duration = benchmark['stats']['mean']
            
            for key, threshold in thresholds.items():
                if key in name and duration > threshold:
                    failures.append(f'{name}: {duration:.4f}s > {threshold}s')
        
        if failures:
            print('Performance regression detected:')
            for failure in failures:
                print(f'  - {failure}')
            exit(1)
        else:
            print('All performance benchmarks passed!')
        "
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-benchmarks
        path: |
          benchmark-output.txt
          performance-results.json

  security-tests:
    name: Security Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety semgrep pytest
        pip install -e .
    
    - name: Run security-focused tests
      run: |
        pytest tests/ -k "security" -v
    
    - name: Bandit security scan
      run: |
        bandit -r hdc_robot_controller/ \
          -x "*/test_*,*/tests/*" \
          -f json \
          -o bandit-security-report.json
    
    - name: Semgrep security scan
      run: |
        semgrep \
          --config=auto \
          --json \
          --output=semgrep-security-report.json \
          hdc_robot_controller/
      continue-on-error: true
    
    - name: Check for secrets
      run: |
        # Simple secret detection
        grep -r -i "password\|secret\|key\|token" hdc_robot_controller/ || true
        grep -r -E "(aws_access_key|aws_secret|api_key|private_key)" . --exclude-dir=.git || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-reports
        path: |
          bandit-security-report.json
          semgrep-security-report.json

  fault-tolerance-tests:
    name: Fault Tolerance Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y stress-ng redis-server
        sudo systemctl start redis-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest psutil
        pip install -e .
    
    - name: Test memory pressure handling
      run: |
        # Run tests under memory pressure
        stress-ng --vm 2 --vm-bytes 50% --timeout 30s &
        STRESS_PID=$!
        pytest tests/ -k "fault_tolerance or memory" -v --timeout=300
        kill $STRESS_PID 2>/dev/null || true
    
    - name: Test high CPU load handling
      run: |
        # Run tests under CPU load
        stress-ng --cpu 4 --timeout 30s &
        STRESS_PID=$!
        pytest tests/ -k "performance" -v --timeout=300
        kill $STRESS_PID 2>/dev/null || true
    
    - name: Test network failure simulation
      run: |
        # Test distributed processing with simulated failures
        pytest tests/ -k "distributed" -v --timeout=300
      continue-on-error: true

  memory-leak-tests:
    name: Memory Leak Detection
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
        pip install -e .
    
    - name: Run memory leak tests
      run: |
        python -c "
        import time
        import psutil
        import gc
        from hdc_robot_controller.core.hypervector import HyperVector
        from hdc_robot_controller.core.memory import AssociativeMemory
        
        def test_memory_stability():
            process = psutil.Process()
            initial_memory = process.memory_info().rss / 1024 / 1024  # MB
            
            # Run intensive operations
            for i in range(1000):
                vectors = [HyperVector.random(10000) for _ in range(10)]
                result = HyperVector.bundle_vectors(vectors)
                
                memory = AssociativeMemory(10000)
                for j, v in enumerate(vectors):
                    memory.store(f'vec_{j}', v)
                
                # Force garbage collection
                gc.collect()
                
                if i % 100 == 0:
                    current_memory = process.memory_info().rss / 1024 / 1024
                    growth = current_memory - initial_memory
                    print(f'Iteration {i}: Memory usage {current_memory:.1f}MB (+{growth:.1f}MB)')
                    
                    if growth > 500:  # 500MB growth threshold
                        raise Exception(f'Excessive memory growth: {growth:.1f}MB')
            
            final_memory = process.memory_info().rss / 1024 / 1024
            total_growth = final_memory - initial_memory
            print(f'Total memory growth: {total_growth:.1f}MB')
            
            if total_growth > 200:  # 200MB final threshold
                raise Exception(f'Memory leak detected: {total_growth:.1f}MB growth')
        
        test_memory_stability()
        print('Memory leak test passed!')
        "

  compatibility-tests:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          - os: ubuntu-20.04
            python-version: '3.11'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        pip install -e .
    
    - name: Run compatibility tests
      run: |
        pytest tests/test_hdc_comprehensive.py::TestHyperVector -v
        pytest tests/test_hdc_comprehensive.py::TestHDCOperations -v

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-22.04
    needs: [
      code-quality,
      unit-tests,
      ros2-tests,
      performance-benchmarks,
      security-tests,
      fault-tolerance-tests,
      memory-leak-tests,
      compatibility-tests
    ]
    if: always()
    
    steps:
    - name: Check quality gate status
      run: |
        echo "Quality Gate Summary:"
        echo "==================="
        
        # Check individual job results
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "ROS2 Tests: ${{ needs.ros2-tests.result }}"
        echo "Performance: ${{ needs.performance-benchmarks.result }}"
        echo "Security: ${{ needs.security-tests.result }}"
        echo "Fault Tolerance: ${{ needs.fault-tolerance-tests.result }}"
        echo "Memory Leaks: ${{ needs.memory-leak-tests.result }}"
        echo "Compatibility: ${{ needs.compatibility-tests.result }}"
        
        # Determine overall result
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.ros2-tests.result }}" == "success" && \
              "${{ needs.performance-benchmarks.result }}" == "success" && \
              "${{ needs.security-tests.result }}" == "success" && \
              "${{ needs.memory-leak-tests.result }}" == "success" && \
              "${{ needs.compatibility-tests.result }}" == "success" ]]; then
          echo ""
          echo "✅ ALL QUALITY GATES PASSED!"
          echo "The code is ready for production deployment."
        else
          echo ""
          echo "❌ QUALITY GATES FAILED!"
          echo "Please fix the issues before merging."
          exit 1
        fi

  nightly-extended-tests:
    name: Nightly Extended Tests
    runs-on: ubuntu-22.04
    if: github.event_name == 'schedule'
    timeout-minutes: 180
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server
        sudo systemctl start redis-server
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-benchmark matplotlib
        pip install -e .
    
    - name: Run extended performance tests
      run: |
        # Test with larger datasets
        python -c "
        import time
        import numpy as np
        from hdc_robot_controller.core.hypervector import HyperVector
        from hdc_robot_controller.core.memory import AssociativeMemory
        
        # Large scale bundling test
        print('Running large scale bundling test...')
        large_vectors = [HyperVector.random(50000) for _ in range(1000)]
        start_time = time.time()
        result = HyperVector.bundle_vectors(large_vectors)
        bundle_time = time.time() - start_time
        print(f'Bundled 1000 vectors (50k dim) in {bundle_time:.2f}s')
        
        # Large memory test
        print('Running large memory test...')
        memory = AssociativeMemory(50000)
        start_time = time.time()
        for i in range(5000):
            memory.store(f'vec_{i}', HyperVector.random(50000))
        store_time = time.time() - start_time
        print(f'Stored 5000 vectors in {store_time:.2f}s')
        
        # Query performance
        query_vector = HyperVector.random(50000)
        start_time = time.time()
        results = memory.query(query_vector, max_results=10)
        query_time = time.time() - start_time
        print(f'Query took {query_time:.2f}s')
        
        print('Extended tests completed successfully!')
        "
    
    - name: Run stress tests
      run: |
        python scripts/benchmark_suite.py
    
    - name: Generate nightly report
      run: |
        echo "# HDC Robot Controller Nightly Test Report" > nightly-report.md
        echo "Date: $(date)" >> nightly-report.md
        echo "" >> nightly-report.md
        echo "## Test Results" >> nightly-report.md
        echo "- Extended performance tests: ✅ Passed" >> nightly-report.md
        echo "- Stress tests: ✅ Passed" >> nightly-report.md
        echo "- Memory usage: Within acceptable limits" >> nightly-report.md
    
    - name: Upload nightly report
      uses: actions/upload-artifact@v3
      with:
        name: nightly-test-report
        path: nightly-report.md