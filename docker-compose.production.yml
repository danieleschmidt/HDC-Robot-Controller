version: '3.8'

services:
  hdc-robot-controller:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    container_name: hdc-robot-controller
    restart: unless-stopped
    
    environment:
      - HDC_LOG_LEVEL=INFO
      - HDC_DIMENSION=10000
      - HDC_ENABLE_GPU=true
      - HDC_ENABLE_MONITORING=true
      - HDC_COORDINATOR_PORT=8888
      - HDC_HEALTH_CHECK_PORT=8080
      - PYTHONPATH=/app
    
    ports:
      - "8080:8080"  # Health check endpoint
      - "8888:8888"  # Distributed coordinator
      - "3000:3000"  # Monitoring dashboard
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config
      - /dev:/dev  # Hardware access for robotics
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    networks:
      - hdc-network
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: hdc-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: hdc-grafana
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hdc_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    
    networks:
      - monitoring

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: hdc-elasticsearch
    restart: unless-stopped
    
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    
    ports:
      - "9200:9200"
    
    networks:
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: hdc-kibana
    restart: unless-stopped
    
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    
    ports:
      - "5601:5601"
    
    depends_on:
      - elasticsearch
    
    networks:
      - monitoring

  redis:
    image: redis:7-alpine
    container_name: hdc-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6379:6379"
    
    networks:
      - hdc-network

  nginx:
    image: nginx:alpine
    container_name: hdc-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    
    depends_on:
      - hdc-robot-controller
    
    networks:
      - hdc-network

volumes:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  redis_data:

networks:
  hdc-network:
    driver: bridge
  monitoring:
    driver: bridge